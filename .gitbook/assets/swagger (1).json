{"openapi":"3.0.3","info":{"version":"v1","title":"Disco API","contact":{"name":"Disco Team","email":"ask@disco.xyz"}},"components":{"securitySchemes":{"apiKey":{"type":"apiKey","in":"header","name":"Authorization"}},"schemas":{"Forbidden":{"type":"object","properties":{"name":{"type":"string","description":"The error name","minLength":1,"example":"FORBIDDEN","default":"FORBIDDEN"},"message":{"type":"string","description":"An error message","minLength":1},"status":{"type":"number","description":"The status code of the exception","example":403,"default":403},"errors":{"type":"array","items":{"$ref":"#/components/schemas/GenericError"},"description":"A list of related errors"},"stack":{"type":"string","description":"The stack trace (only in development mode)"}},"required":["name","message","status"]},"GenericError":{"type":"object","properties":{"name":{"type":"string","description":"The error name","minLength":1},"message":{"type":"string","description":"An error message","minLength":1}},"additionalProperties":true,"required":["name","message"]},"Unauthorized":{"type":"object","properties":{"name":{"type":"string","description":"The error name","minLength":1,"example":"UNAUTHORIZED","default":"UNAUTHORIZED"},"message":{"type":"string","description":"An error message","minLength":1},"status":{"type":"number","description":"The status code of the exception","example":401,"default":401},"errors":{"type":"array","items":{"$ref":"#/components/schemas/GenericError"},"description":"A list of related errors"},"stack":{"type":"string","description":"The stack trace (only in development mode)"}},"required":["name","message","status"]},"NotFound":{"type":"object","properties":{"name":{"type":"string","description":"The error name","minLength":1,"example":"NOT_FOUND","default":"NOT_FOUND"},"message":{"type":"string","description":"An error message","minLength":1},"status":{"type":"number","description":"The status code of the exception","example":404,"default":404},"errors":{"type":"array","items":{"$ref":"#/components/schemas/GenericError"},"description":"A list of related errors"},"stack":{"type":"string","description":"The stack trace (only in development mode)"}},"required":["name","message","status"]},"InternalServerError":{"type":"object","properties":{"name":{"type":"string","description":"The error name","minLength":1,"example":"INTERNAL_SERVER_ERROR","default":"INTERNAL_SERVER_ERROR"},"message":{"type":"string","description":"An error message","minLength":1},"status":{"type":"number","description":"The status code of the exception","example":500,"default":500},"errors":{"type":"array","items":{"$ref":"#/components/schemas/GenericError"},"description":"A list of related errors"},"stack":{"type":"string","description":"The stack trace (only in development mode)"}},"required":["name","message","status"]},"UserLoginResult":{"type":"object","properties":{"did":{"type":"string"},"token":{"type":"string"}}},"VCDoc":{"type":"object","properties":{"_id":{"type":"string","description":"Internal ID used by data storage system","title":"Database ID"},"vc":{"type":"object","example":"See https://www.w3.org/TR/vc-data-model/#example-a-simple-example-of-a-verifiable-credential","description":"Verifiable Credential payload","title":"vc"},"jwt":{"type":"string","example":"eyJhbGciOiJIUzI1N........","description":"JSON Web Token per RFC 7519","title":"JWT"},"isPublic":{"type":"boolean","example":"true","description":"If true anyone can read the credential. If false, only the issuer and the claimant can read the credential.","title":"Public/Private Flag"},"issuer":{"type":"object","example":"","description":"JSON Web Token per RFC 7519","title":"Verifiable Credential Issuer"},"recipient":{"type":"string","description":"The DID value for the recipient of Verifiable Credential.","title":"Holder or claimant of Verifiable Credential"},"subject":{"type":"string","description":"Subject is what the credential claim is made about.","title":"Subject of Credential"},"schema":{"type":"string","example":"https://raw.githubusercontent.com/discoxyz/disco-schemas/main/json/MembershipCredential/1-0-0.json","description":"The URL of the verifiable crednetial schema. Available schemas can be found at https://github.com/discoxyz/disco-schemas","title":"schema"},"genId":{"type":"string","title":"Unique Verifiable Credential ID"},"updatedAt":{"type":"string","title":"Latest update date and time"},"isDeleted":{"type":"boolean","title":"Soft-delete flag"},"history":{"type":"array","title":"List of changes to the credential, if any."}}},"VcBrandOptions":{"type":"object"},"CredentialRequestData":{"type":"object","properties":{"schemaUrl":{"type":"string","example":"https://raw.githubusercontent.com/discoxyz/disco-schemas/main/json/MembershipCredential/1-0-0.json","description":"The URL of the verifiable crednetial schema. Available schemas can be found at \n    https://github.com/discoxyz/disco-schemas","title":"schemaUrl"},"recipientDID":{"type":"string","example":"did:3:Example987xyz","description":"The DID address of the credential's claimant","title":"recipientDID"},"subjectData":{"type":"object","example":"{\n    \"memberId\": \"Goldstar Member\",\n    \"membershipDescription\": \"Demo membership to showcase Disco API\",\n    \"membershipLevel\": \"Permanent\",\n    \"membershipType\": \"Developer\",\n    \"organization\": \"Disco.xyz\"\n  }","description":"The fields and values for the credential (based on its schema)","title":"subjectData"},"expirationDate":{"type":"string","example":"","description":"The date for the credential to expire for the claimant. \n    Leave empty if there's no expiration.","title":"expirationDate"},"suite":{"type":"string","example":"","description":"Optional - supported values are \"JWT\" and \"712\".","title":"suite"},"issuer":{"type":"string","example":"did:web:api.disco.xyz/v1/disco","description":"The DID address of the credential's issuer.","title":"issuer"},"skipSign":{"type":"boolean","example":"false","description":"To sign or not to sign - hint you should sign! Either leave out or assign false.","title":"skipSign"}}},"BadRequest":{"type":"object","properties":{"name":{"type":"string","description":"The error name","minLength":1,"example":"BAD_REQUEST","default":"BAD_REQUEST"},"message":{"type":"string","description":"An error message","minLength":1},"status":{"type":"number","description":"The status code of the exception","example":400,"default":400},"errors":{"type":"array","items":{"$ref":"#/components/schemas/GenericError"},"description":"A list of related errors"},"stack":{"type":"string","description":"The stack trace (only in development mode)"}},"required":["name","message","status"]},"SearchCredentialRequest":{"type":"object","properties":{"criteria":{"type":"array","description":"Search Criteria consiting of Credential `field`, search `operator`, \n        and `value` to seach for.","title":"Criteria"},"conjunction":{"type":"string","description":"`and`  `or`","title":"Conjunction"},"page":{"type":"number","example":"10","description":"Number of pages to use for pagination, defaults to 1.","title":"Page"},"size":{"type":"number","example":"100","description":"Number of credentials per pages in pagination, defaults to 20.","title":"Size"}}},"CredentialCountResult":{"type":"object","properties":{"inbox":{"type":"number","description":"Count of credentials in Inbox","title":"Inbox"},"sent":{"type":"number","description":"Count of credentials Sent","title":"Sent"},"public":{"type":"number","description":"Count of Public credentials in Inbox","title":"Public"},"total":{"type":"number","description":"Overall count of credentials","title":"Total"}}},"MultiDidRequest":{"type":"object","properties":{"dids":{"type":"array","example":"\"dids\": [ \"did:3:123abcexample\", \"did:3:456defexample\" ]","description":"A collection of DIDs","title":"DIDs"},"tab":{"type":"string","example":"\"dids\": [ \"did:3:123abcexample\", \"did:3:456defexample\" ]","description":"Legacy locations from where to retrieve Credentials from. Valid options are \"inbox\", \n    \"sent\", \"public\", and \"all. Defaults to \"all\" which would be most appropiate for most use cases.","title":"Tab"},"page":{"type":"number","example":"10","description":"Number of pages to use for pagination, defaults to 1.","title":"Page"},"size":{"type":"number","example":"100","description":"Number of Credentials per pages in pagination, defaults to 20.","title":"Size"}}},"BatchStorageRequest":{"type":"object","properties":{"issuer":{"type":"string","example":"did:web:api.disco.xyz/v1/disco","description":"The DID of the credential issuer","title":"Issuer"},"vcs":{"type":"array","example":"did:web:api.disco.xyz/v1/disco","description":"A collection of verifiable crednetials to include in the batch collection","title":"vcs"}},"description":"The DID of the credential issuer","title":"BatchStorageRequest"},"IssueCredentialsRequest":{"type":"object","properties":{"issuer":{"type":"string","example":"did:web:api.disco.xyz/v1/disco","description":"The DID of the Credential issuer","title":"Issuer"},"schema":{"type":"string","example":"https://raw.githubusercontent.com/discoxyz/disco-schemas/main/json/GMCredential/1-0-0.json","description":"The Credential schema","title":"Schema"},"suite":{"type":"string","example":"jwt","description":"Signing suite. Use JWT or 712","title":"Suite"},"subjects":{"type":"array","example":"[\n        { \"subject\": { \"id\": \"did:3:abc123\" },\n          \"recipient\": \"did:3:abc123\",\n         \"expirationDate\": \"\" }\n    ]","description":"One or more Credential recipient DIDs","title":"Subject"}},"description":"IssueCredentialsRequest"},"DidWebRequest":{"type":"object","properties":{"alias":{"type":"string","example":"did:web:api.disco.xyz/v1/disco","description":"The DID of the credential issuer","title":"Alias"},"method":{"type":"string","example":"did:web","description":"DID method - only did:web is supported","title":"Method"},"requestorDid":{"type":"string","example":"did:3:abc123organization","description":"The DID to create the did:web DID for. The DID requestion must be an Organization.","title":"Requestor DID"}}},"PersonaUpdate":{"type":"object"},"ProfileModel":{"type":"object","properties":{"profile":{"type":"array","uniqueItems":true,"items":{"$ref":"#/components/schemas/Profile"}}}},"Profile":{"type":"object","properties":{"bio":{"type":"string","example":"This is a bio","description":"Bio of the profile. This can be updated once they sign into Disco.","title":"bio","minLength":3},"name":{"type":"string","example":"Bob","description":"Self-attested name or identifier that they'd like to go by.","title":"name","minLength":3},"avatar":{"type":"string","example":"https://pbs.twimg.com/profile_images/1503385343730540544/dWdiICQX_400x400.jpg","description":"image url of their PFP, or any other image they'd like to display as their Disco pfp!","title":"avatar","minLength":20},"ethAddress":{"type":"string","example":"0xe6ff2d91f6eeee8bda4bcc562d63c431496fcf2a","description":"This is the eth address. Usually in the format 0xABC123456890","title":"ethAddress","minLength":20}}}}},"security":[{"apiKey":[]}],"paths":{"/v1/apikey":{"get":{"operationId":"apiKeyControllerGetAllUserApiKeys","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"Success"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Gets All API Keys","parameters":[],"tags":["ApiKeyController"]},"post":{"operationId":"apiKeyControllerCreateUserApiKey","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"ApiKey Created"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Creates an API Key","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"name":{"type":"string"}},"type":"object"}}}},"tags":["ApiKeyController"]},"delete":{"operationId":"apiKeyControllerDeleteUserApiKey","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"ApiKey Deleted"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Deletes an API Key","parameters":[{"in":"query","name":"name","required":false,"schema":{"type":"string"}}],"tags":["ApiKeyController"]}},"/v1/apikey/admin/create":{"post":{"operationId":"apiKeyControllerCreateApiKey","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"ApiKey Created"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Creates an API Key","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"name":{"type":"string"},"roles":{"type":"array","items":{"oneOf":[{"type":"integer","multipleOf":1},{"type":"number"},{"type":"string"},{"type":"boolean"},{"type":"array"},{"type":"object"}],"nullable":true}},"userDid":{"type":"string"}},"type":"object"}}}},"tags":["ApiKeyController"]}},"/v1/apikey/admin/delete":{"delete":{"operationId":"apiKeyControllerDeleteApiKey","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"ApiKey Deleted"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Deletes an API Key","parameters":[{"in":"query","name":"name","required":false,"schema":{"type":"string"}},{"in":"query","name":"userDid","required":false,"schema":{"type":"string"}}],"tags":["ApiKeyController"]}},"/v1/auth/{ethAddress}/betaAccess":{"post":{"operationId":"authControllerCheckBetaAccess","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"Success"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"500":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerError"}}}}},"summary":"Check for access to beta","parameters":[{"in":"path","name":"ethAddress","required":true,"schema":{"type":"string"}}],"tags":["AuthController"]}},"/v1/auth/nonce":{"post":{"operationId":"authControllerNonce","responses":{"200":{"content":{"*/*":{"schema":{"type":"string"}}},"description":"Success"}},"parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"did":{"type":"string"}},"type":"object"}}}},"tags":["AuthController"]}},"/v1/auth/login":{"post":{"operationId":"authControllerLogin","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserLoginResult"}}},"description":"Success"}},"parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"type":"object"}}}},"tags":["AuthController"]}},"/v1/auth/refresh":{"post":{"operationId":"authControllerRefresh","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserLoginResult"}}},"description":"Success"}},"parameters":[],"tags":["AuthController"]}},"/v1/auth/logout":{"post":{"operationId":"authControllerLogout","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"Success"}},"parameters":[],"tags":["AuthController"]}},"/v1/auth/userinfo":{"get":{"operationId":"authControllerUserInfo","responses":{"200":{"content":{"*/*":{"schema":{"type":"string"}}},"description":"Success"}},"parameters":[],"tags":["AuthController"]}},"/v1/credential/branding":{"get":{"operationId":"credentialControllerGetVcBranding","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"boolean"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Return branding information for an org","parameters":[{"in":"query","name":"did","required":false,"schema":{"type":"string"}},{"in":"query","name":"vcId","required":false,"schema":{"type":"string"}}],"tags":["CredentialController"]},"post":{"operationId":"credentialControllerSaveVcBranding","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"boolean"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Updates current branding or creates new branding info if not exists","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"did":{"type":"string"},"orgOptions":{"$ref":"#/components/schemas/VcBrandOptions"},"vcId":{"type":"string"}},"type":"object"}}}},"tags":["CredentialController"]}},"/v1/credential/defaults":{"get":{"operationId":"credentialControllerGetVcDefaults","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"boolean"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Return default values for an org","parameters":[{"in":"query","name":"did","required":false,"schema":{"type":"string"}},{"in":"query","name":"vcId","required":false,"schema":{"type":"string"}}],"tags":["CredentialController"]},"post":{"operationId":"credentialControllerSaveVcDefaults","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"boolean"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Update default values for an org","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"did":{"type":"string"},"defaultValues":{"type":"string"},"vcId":{"type":"string"}},"type":"object"}}}},"tags":["CredentialController"]}},"/v1/credential/{id}":{"get":{"operationId":"credentialControllerGetCredentialById","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/VCDoc"}}},"description":"A Verifiable Credential document"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"description":"Returns a single credential using its verifiable credential ID (`vc.id`) - \n    assuming the Api Key holder is either the holder, issuer or the Credential is public.","summary":"Returns a single credential using its `vc.id`","parameters":[{"description":"Unique ID of Credential","in":"path","name":"id","required":true,"schema":{"type":"string","example":"\"did:3:123abcexample#someuuid\""}}],"tags":["CredentialController"]},"patch":{"operationId":"credentialControllerUpdateCredential","responses":{"200":{"description":"Success"}},"summary":"Set credential public/private and archived","parameters":[{"in":"path","name":"id","required":true,"schema":{"type":"string"}},{"in":"query","name":"isPublic","required":false,"schema":{"type":"boolean"}},{"in":"query","name":"isArchived","required":false,"schema":{"type":"boolean"}}],"tags":["CredentialController"]},"put":{"operationId":"credentialControllerAssignSignature","responses":{"200":{"description":"Success"}},"parameters":[{"in":"path","name":"id","required":true,"schema":{"type":"string"}}],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"sig":{"type":"string"}},"type":"object"}}}},"tags":["CredentialController"]}},"/v1/credential/verify":{"post":{"operationId":"credentialControllerVerifyVc","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"boolean"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"description":"Verify signature for a Credential is EIP-712 or JWT. The Credential must conform \n    to the `VCDoc` model","summary":"Verify signature","parameters":[],"requestBody":{"required":false,"description":"The text representation of the Credential to verify ","content":{"application/json":{"schema":{"properties":{"vc":{"type":"string"}},"type":"object"}}}},"tags":["CredentialController"]}},"/v1/credential":{"post":{"operationId":"credentialControllerIssueCredential","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/VCDoc"}}},"description":"Success"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"500":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/InternalServerError"}}},"description":"Credential not created function captureStackTrace() { [native code] }"}},"description":"Generate and return a signed Credential. This will also write the Credential the \n    recipient's data backpack in Disco's Verifiable Data Registry. The JSON body should contain \n    required Credential values for the schema type used. Available schemas and their specifications \n    can be found at https://github.com/discoxyz/disco-schemas.","summary":"Programmatically issue one verifiable credential","parameters":[],"requestBody":{"description":"The JSON body should contain specific credential schema values required for the \n      Credential type used. Available schemas can be found at https://github.com/discoxyz/disco-schemas.","required":false,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CredentialRequestData"}}}},"tags":["CredentialController"]},"delete":{"operationId":"credentialControllerDeleteCredential","responses":{"200":{"description":"Success"}},"summary":"Archive a credential, can also use PATCH to update isArchived value","parameters":[{"in":"query","name":"id","required":false,"schema":{"type":"string"}}],"tags":["CredentialController"]}},"/v1/credential/tempStore/{did}/all":{"get":{"operationId":"credentialCacheControllerGetTempVcs","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"boolean"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Temp vc store","parameters":[{"in":"path","name":"did","required":true,"schema":{"type":"string"}}],"tags":["CredentialCacheController"]}},"/v1/credential/tempStore/{id}":{"get":{"operationId":"credentialCacheControllerGetTempVc","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"boolean"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Temp vc store","parameters":[{"in":"path","name":"id","required":true,"schema":{"type":"string"}}],"tags":["CredentialCacheController"]}},"/v1/credential/tempStore":{"post":{"operationId":"credentialCacheControllerStoreTempVc","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"boolean"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Temp vc store","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"did":{"type":"string"},"vc":{"type":"string"}},"type":"object"}}}},"tags":["CredentialCacheController"]},"delete":{"operationId":"credentialCacheControllerDeleteTempVc","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"boolean"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Temp vc store","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"vcId":{"type":"string"}},"type":"object"}}}},"tags":["CredentialCacheController"]}},"/v1/credentials/search":{"get":{"operationId":"credentialsControllerSearch","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/VCDoc"}}},"description":"Returns a collection of Verifiable Credentials"},"400":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}},"description":"Bad Request"}},"parameters":[{"description":"The full name of the field to use in search.","in":"query","name":"field","required":false,"schema":{"type":"string","example":""}},{"description":"The operator to use for the search. Supported values are ==, >, <, >=, <=, [], ![], !=","in":"query","name":"op","required":false,"schema":{"type":"string","example":">"}},{"description":"","in":"query","name":"value","required":false,"schema":{"type":"string","example":""}},{"description":"","in":"query","name":"page","required":false,"schema":{"type":"number","example":""}},{"description":"","in":"query","name":"size","required":false,"schema":{"type":"number","example":""}}],"tags":["CredentialsController"]},"post":{"operationId":"credentialsControllerMultisearch","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/VCDoc"}}},"description":"Returns a collection of Verifiable Credentials"},"400":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}},"description":"Bad Request"}},"description":"Filter out Credentials for a given type, based on Credential schema, for a given DID.","summary":"Filter out a type of Credentials for DID","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/SearchCredentialRequest"}}}},"tags":["CredentialsController"]}},"/v1/credentials/filter/type/{did}":{"get":{"operationId":"credentialsControllerGetCredentialsFilteredByType","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/VCDoc"}}},"description":"Returns a collection of Verifiable Credentials"},"400":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}},"description":"Bad Request"}},"description":"Filter out Credentials for a given type, based on Credential schema, for a given DID.","summary":"Filter out a type of Credentials for DID","parameters":[{"description":"The DID of the Credential holder","in":"path","name":"did","required":true,"schema":{"type":"string"}},{"description":"The type of Credentials to filter","in":"query","name":"types","required":false,"schema":{"type":"string","example":"DarkModePreferenceCredential"}}],"tags":["CredentialsController"]}},"/v1/credentials/isDiscoMember/{did}":{"get":{"operationId":"credentialsControllerIsUserDiscoMember","responses":{"200":{"description":"Success"}},"parameters":[{"in":"path","name":"did","required":true,"schema":{"type":"string"}}],"tags":["CredentialsController"]}},"/v1/credentials/encrypted/{did}":{"get":{"operationId":"credentialsControllerGetEncryptedCredentialsByDid","responses":{"200":{"description":"Success"}},"parameters":[{"in":"path","name":"did","required":true,"schema":{"type":"string"}}],"tags":["CredentialsController"]},"post":{"operationId":"credentialsControllerSaveDecryptedCredentials","responses":{"200":{"description":"Success"}},"description":"Using the wallet holder's key to decrypt and save their credentials (based on their DID) \n    in holder's data bakcpack. The DID must be a Disco backpack holder.","parameters":[{"description":"The wallet holder's DID","in":"path","name":"did","required":true,"schema":{"type":"string"}}],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"credentials":{"type":"array","items":{"oneOf":[{"type":"integer","multipleOf":1},{"type":"number"},{"type":"string"},{"type":"boolean"},{"type":"array"},{"type":"object"}],"nullable":true}}},"type":"object"}}}},"tags":["CredentialsController"]}},"/v1/credentials/count":{"post":{"operationId":"credentialsControllerGetCredentialCountForDid","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CredentialCountResult"}}},"description":"Success"}},"description":"Retrieve all Verifiable Credentials counts for one or more DID.","summary":"Returns count of Credentials","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"dids":{"type":"array","items":{"oneOf":[{"type":"integer","multipleOf":1},{"type":"number"},{"type":"string"},{"type":"boolean"},{"type":"array"},{"type":"object"}],"nullable":true}}},"type":"object"}}}},"tags":["CredentialsController"]}},"/v1/credentials/{did}":{"get":{"operationId":"credentialsControllerGetCredentialsByDid","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/VCDoc"}}},"description":"Returns a collection of Verifiable Credentials"},"400":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}},"description":"Bad Request"}},"description":"Retrieves all verifiable credentials for a given DID. Optionally the return can be \n    paginated using the query parameters \"page\" and \"size\".","summary":"Retrieve all verifiable credentials for a DID","parameters":[{"description":"The holder DID to retrieve Credentials for","in":"path","name":"did","required":true,"schema":{"type":"string","example":"did:web:api.disco.xyz/v1/disco"}},{"description":"Page number to get, defaults to 1. For example if size=10 use page=2 to get \n      Credentails 11-20.","in":"query","name":"page","required":false,"schema":{"type":"number","example":"1"}},{"description":"Number of Credentials per page, defaults to 20","in":"query","name":"size","required":false,"schema":{"type":"number","example":"20"}}],"tags":["CredentialsController"]}},"/v1/credentials/multi":{"post":{"operationId":"credentialsControllerGetCredentialsForDids","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/VCDoc"}}},"description":"Returns a collection of Verifiable Credentials"},"400":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}},"description":"Bad Request"}},"description":"Returns a collection of Verifiable Credentials for a collection of DIDs. \n    The collection of DIDs may represent multiple identities, but could also be used when one identity is \n    know to have multiple DIDs, e.g.,\"did:3:123abcexample\" and \"did:ethr:123abcexample.","summary":"Returns a collection of Verifiable Credentials","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/MultiDidRequest"}}}},"tags":["CredentialsController"]}},"/v1/credentials/storePartnerBatch":{"post":{"operationId":"credentialsControllerStorePartnerLargeBatch","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"boolean"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Use POST /credentials instead","deprecated":true,"parameters":[],"requestBody":{"description":"","required":false,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BatchStorageRequest"}}}},"tags":["CredentialsController"]}},"/v1/credentials/fetchPartnerBatch":{"post":{"operationId":"credentialsControllerFetchPartnerLargeBatch","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"boolean"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"summary":"Use POST /credentials/multi instead","deprecated":true,"parameters":[],"requestBody":{"required":false,"description":"The DID to pull batch issued credentials for","content":{"application/json":{"schema":{"properties":{"did":{"type":"string"}},"type":"object"}}}},"tags":["CredentialsController"]}},"/v1/credentials":{"post":{"operationId":"credentialsControllerIssueCredentials","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/VCDoc"}}},"description":"Returns and store a collection of Verifiable Credential Documents"},"400":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}},"description":"Bad Request"}},"description":"Generate and return multiple signed Credentials. This will also write the Credentials \n  to the recipient's data backpacks in Disco's Verifiable Data Registry. The JSON body should contain \n  required Credentials and their values for the schema type used. Available schemas and their specifications \n  can be found at https://github.com/discoxyz/disco-schemas.","summary":"Programmatically issue multiple Verifiable Credentials, aka batch issuance","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/IssueCredentialsRequest"}}}},"tags":["CredentialsController"]}},"/v1/{did}/.well-known/did.json":{"get":{"operationId":"didWebControllerGetDidDoc","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"Success"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"No profile found"}},"description":"Returns the public facing did:web document for a given DID. For example, using https://api.disco.xyz/v1/{your did:web alias}/.well-known/did.json.\n  ```json\n  {\n    \"@context\": [\n        \"https://www.w3.org/ns/did/v1\",\n        \"https://w3id.org/security/v2\",\n        \"https://w3id.org/security/suites/secp256k1recovery-2020/v2\"\n    ],\n    \"id\": \"did:web:api.disco.xyz/v1/disco\",\n    \"verificationMethod\": [\n        {\n            \"id\": \"did:web:api.disco.xyz/v1/disco#137e71d6-13fa-4e7e-88fe-f5535c6c1dc2\",\n            \"type\": \"EcdsaSecp256k1VerificationKey2019\",\n            \"controller\": \"did:web:api.disco.xyz/v1/disco\",\n            \"publicKeyHex\": \"042733cd35bc188b400769164bc52e2f9628dcfa18c26a6058afc81f125a2e0988308c6ec3436e2a28bb09e3d75a177c1935008f6a96db526c92d6c30bc0013aa8\"\n        }\n    ],\n    \"authentication\": [\n        \"did:web:api.disco.xyz/v1/disco#137e71d6-13fa-4e7e-88fe-f5535c6c1dc2\"\n    ],\n    \"assertionMethod\": [\n        \"did:web:api.disco.xyz/v1/disco#137e71d6-13fa-4e7e-88fe-f5535c6c1dc2\"\n    ],\n    \"keyAgreement\": [],\n    \"service\": []\n  }\n  ```","summary":"Retrieve the did:web DID document","parameters":[{"in":"path","name":"did","required":true,"schema":{"type":"string"}}],"tags":["DidWebController"]}},"/v1/did/admin/createDid":{"post":{"operationId":"didWebControllerCreateDid","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"boolean"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"}},"summary":"Create a new did:web DID","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/DidWebRequest"}}}},"tags":["DidWebController"]}},"/v1/discord/discordLink":{"post":{"operationId":"discordControllerValidateDiscordAttestation","responses":{"200":{"content":{"*/*":{"schema":{"type":"boolean"}}}},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"Validated Discord Attestation","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"messageUrl":{"type":"string"},"did":{"type":"string"},"discordUsername":{"type":"string"}},"type":"object"}}}},"tags":["DiscordController"]}},"/v1/github/account":{"get":{"operationId":"githubControllerGetGithubAccount","responses":{"200":{"content":{"*/*":{"schema":{"type":"boolean"}}},"description":"returns github userData"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"returns github userdata for add disco linkage","parameters":[{"in":"query","name":"handle","required":false,"schema":{"type":"string"}},{"in":"query","name":"did","required":false,"schema":{"type":"string"}}],"tags":["GithubController"]}},"/v1/HealthCheck/twitter":{"get":{"operationId":"healthCheckControllerTwitterHealthCheck","responses":{"200":{"content":{"*/*":{"schema":{"type":"boolean"}}}},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"","parameters":[],"tags":["HealthCheckController"]}},"/v1/HealthCheck/discord":{"get":{"operationId":"healthCheckControllerDiscordHealthCheck","responses":{"200":{"content":{"*/*":{"schema":{"type":"boolean"}}}},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"","parameters":[],"tags":["HealthCheckController"]}},"/v1/lens/lensPublication":{"get":{"operationId":"lensControllerGetLensAccount","responses":{"200":{"content":{"*/*":{"schema":{"type":"boolean"}}}},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"","parameters":[{"in":"query","name":"did","required":false,"schema":{"type":"string"}},{"in":"query","name":"handle","required":false,"schema":{"type":"string"}}],"tags":["LensController"]}},"/v1/persona/user/disco/{did}":{"get":{"operationId":"personaControllerIsUser","responses":{"200":{"description":"Success"}},"parameters":[{"in":"path","name":"did","required":true,"schema":{"type":"string"}}],"tags":["PersonaController"]}},"/v1/persona/user/org/{did}":{"get":{"operationId":"personaControllerIsOrgUser","responses":{"200":{"description":"Success"}},"parameters":[{"in":"path","name":"did","required":true,"schema":{"type":"string"}}],"tags":["PersonaController"]}},"/v1/persona/{did}":{"post":{"operationId":"personaControllerCreatePersona","responses":{"200":{"description":"Success"}},"parameters":[{"in":"path","name":"did","required":true,"schema":{"type":"string"}}],"tags":["PersonaController"]}},"/v1/persona":{"patch":{"operationId":"personaControllerUpdatePersona","responses":{"200":{"description":"Success"}},"parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PersonaUpdate"}}}},"tags":["PersonaController"]}},"/v1/persona/did/metadata/{did}":{"get":{"operationId":"personaDidControllerGetPersonaMetadata","responses":{"200":{"description":"Success"}},"description":"Returns Persona metadata for a DID holder. Persona metadata is composed of avatar links, username, color schemes, and verified account handles (such as Twitter, Discord, etc.).","summary":"Persona Meatadata","parameters":[{"description":"The holder DID to retrieve Persona metadata for","in":"path","name":"did","required":true,"schema":{"type":"string","example":"did:web:api.disco.xyz/v1/disco"}}],"tags":["PersonaDidController"]}},"/v1/persona/did/{did}":{"get":{"operationId":"personaDidControllerGetPersonaByDid","responses":{"200":{"description":"Success"}},"parameters":[{"in":"path","name":"did","required":true,"schema":{"type":"string"}}],"tags":["PersonaDidController"]}},"/v1/persona/find/eth/{eoa}":{"get":{"operationId":"personaSearchControllerGetPersonaByEthereumAddress","responses":{"400":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/BadRequest"}}},"description":"Bad Request"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Person not found"}},"description":"Returns a profile via its linked Ethereum Address. Usually in the format: `0xABC1234567890`","summary":"Get persona by Ethereum Address","parameters":[{"description":"Ethereum Address","in":"path","name":"eoa","required":true,"schema":{"type":"string","example":"0xABC1234567890"}}],"tags":["PersonaSearchController"]}},"/v1/persona/find/{type}/{handle}":{"get":{"operationId":"personaSearchControllerGetPersonasByHandle","responses":{"200":{"description":"Success"}},"parameters":[{"in":"path","name":"type","required":true,"schema":{"type":"string"}},{"in":"path","name":"handle","required":true,"schema":{"type":"string"}}],"tags":["PersonaSearchController"]}},"/v1/persona/link":{"get":{"operationId":"personaLinkControllerGetLink","responses":{"200":{"description":"Success"}},"parameters":[{"in":"query","name":"did","required":false,"schema":{"type":"string"}},{"in":"query","name":"type","required":false,"schema":{"type":"string"}},{"in":"query","name":"handle","required":false,"schema":{"type":"string"}}],"tags":["PersonaLinkController"]}},"/v1/persona/link/evidence":{"post":{"operationId":"personaLinkControllerAddEvidence","responses":{"200":{"description":"Success"}},"parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"did":{"type":"string"},"type":{"type":"string"},"handle":{"type":"string"},"evidence":{"type":"string"}},"type":"object"}}}},"tags":["PersonaLinkController"]}},"/v1/persona/link/create":{"post":{"operationId":"personaLinkControllerCreateAccountLink","responses":{"200":{"description":"Success"}},"parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"did":{"type":"string"},"type":{"type":"string"},"handle":{"type":"string"}},"type":"object"}}}},"tags":["PersonaLinkController"]}},"/v1/persona/link/request":{"post":{"operationId":"personaLinkControllerCreateAccountLink_1","responses":{"200":{"description":"Success"}},"parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"did":{"type":"string"},"type":{"type":"string"},"handle":{"type":"string"}},"type":"object"}}}},"tags":["PersonaLinkController"]}},"/v1/persona/link/verify":{"post":{"operationId":"personaLinkControllerVerifyAccountLink","responses":{"200":{"description":"Success"}},"parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"did":{"type":"string"},"type":{"type":"string"},"handle":{"type":"string"},"linkages":{"type":"object"}},"type":"object"}}}},"tags":["PersonaLinkController"]}},"/v1/persona/link/{type}":{"post":{"operationId":"personaLinkControllerSetLink","responses":{"200":{"description":"Success"}},"parameters":[{"in":"path","name":"type","required":true,"schema":{"type":"string"}}],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"handle":{"type":"string"},"evidence":{"type":"string"},"did":{"type":"string"}},"type":"object"}}}},"tags":["PersonaLinkController"]}},"/v1/persona/link/{id}":{"delete":{"operationId":"personaLinkControllerDeleteLink","responses":{"200":{"description":"Success"}},"parameters":[{"in":"path","name":"id","required":true,"schema":{"type":"string"}}],"tags":["PersonaLinkController"]}},"/v1/profile/address/{address}":{"get":{"operationId":"profileEndpointsGetProfileByAddress","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProfileModel"}}},"description":"Successful operation"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized. Request not authenticated, API token is missing, invalid or expired."},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not found"}},"description":"Returns a profile via its linked Ethereum Address. Usually in the format: `0xABC1234567890`","summary":"Returns a profile using its linked Ethereum Address","parameters":[{"description":"Ethereum Address","in":"path","name":"address","required":true,"schema":{"type":"string","example":"0xABC1234567890"}}],"tags":["Profile Endpoints"]}},"/v1/profile/domainLink":{"post":{"operationId":"profileEndpointsSetDomainLink","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}}},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"Posts and checks the domain dns entries for a DID link","parameters":[],"requestBody":{"required":false,"content":{"application/json":{"schema":{"properties":{"domain":{"type":"string"},"did":{"type":"string"}},"type":"object"}}}},"tags":["Profile Endpoints"]}},"/v1/profile/byDomain/{domain}":{"get":{"operationId":"profileEndpointsGetProfileByDomain","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProfileModel"}}}},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"Gets a profile vis its linked domain","parameters":[{"in":"path","name":"domain","required":true,"schema":{"type":"string"}}],"tags":["Profile Endpoints"]}},"/v1/profile/byTwitter/{twitterHandle}":{"get":{"operationId":"profileEndpointsGetProfileByTwitter","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProfileModel"}}},"description":"Successful Operation!"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized. Request not authenticated, API token is missing, invalid or expired."},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"description":"Returns a profile via its linked twitter account. Takes in url param /twitter-handle","summary":"Gets a profile vis its linked twitter account","parameters":[{"in":"path","name":"twitterHandle","required":true,"schema":{"type":"string"}}],"tags":["Profile Endpoints"]}},"/v1/profile/byDiscord/{discordHandle}":{"get":{"operationId":"profileEndpointsGetProfileByDiscord","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProfileModel"}}}},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"Gets a profile vis its linked twitter account","parameters":[{"in":"path","name":"discordHandle","required":true,"schema":{"type":"string"}}],"tags":["Profile Endpoints"]}},"/v1/profile/{did}":{"get":{"operationId":"profileEndpointsGetProfileByDid","responses":{"200":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/ProfileModel"}}},"description":"Successful Operation!"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized. Request not authenticated, API token is missing, invalid or expired."},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint Not Found"}},"description":"Returns a holder profile via its DID","summary":"Gets a Profile via its DID","parameters":[{"description":"Profile holder's DID","in":"path","name":"did","required":true,"schema":{"type":"string","example":"did:web:api.disco.xyz/v1/disco"}}],"tags":["Profile Endpoints"]},"post":{"operationId":"profileEndpointsCreateUser","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}}},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"Posts the did for the user","parameters":[{"in":"path","name":"did","required":true,"schema":{"type":"string"}}],"tags":["Profile Endpoints"]}},"/v1/profile/{did}/credentials/byTypes":{"get":{"operationId":"profileEndpointsGetCredentialsByDidAndTypes","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}}},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"Gets credentials for a did by type","parameters":[{"description":"Holder's DID","in":"path","name":"did","required":true,"schema":{"type":"string","example":"did:web:api.disco.xyz/v1/disco"}},{"description":"Verifiable credential type","in":"query","name":"types","required":false,"schema":{"type":"string","example":"DarkModePreferenceCredential"}}],"tags":["Profile Endpoints"]}},"/v1/profile/{did}/credentials":{"get":{"operationId":"profileEndpointsGetCredentialsByDid","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}}},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"Gets credentials for a did","parameters":[{"in":"path","name":"did","required":true,"schema":{"type":"string"}}],"tags":["Profile Endpoints"]}},"/v1/reports":{"get":{"operationId":"reportControllerGetMetrics","responses":{"200":{"description":"Success"}},"parameters":[],"tags":["ReportController"]}},"/v1/search":{"get":{"operationId":"searchControllerGetSearch","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"Success"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized - you need an API key with administrator privilege"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden - you need an API key with administrator privilege"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"No holders found"}},"description":"Search for holder DIDs by their linked account handle names. For example, Discord \n    or Twitter handles. Returns an array of DIDs. \nNote: this API requires a key with \n    administrator privilege","summary":"Search by any user handle","parameters":[{"description":"User handle to recieve a list of DIDs for. Search uses handle input as substring, \n      e.g., handle=abc returns DIDs for handles \"123abcdef\" and \"abc\". /v1/search?handle={handle}","in":"query","name":"handle","required":false,"schema":{"type":"string","example":"provenauthority"}}],"tags":["SearchController"]}},"/v1/search/specific":{"get":{"operationId":"searchControllerGetSearchSpecific","responses":{"200":{"content":{"*/*":{"schema":{"type":"object"}}},"description":"Success"},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized, you need an API key with administrator privilege"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Unauthorized, you need an API key with administrator privilege"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"No holders found"}},"description":"Search for a specific Credential holder using the account link type (\"twitter\", \n    \"discord\", \"domain\", \"lens\" and \"github\"). and the holder's handle for the account link type. \n    \nNote: this API requires a key with administrator privilege","summary":"Search for a specific Credential holder","parameters":[{"description":"Valid account link types are \"twitter\", \"discord\", \"domain\", \"lens\" and \"github\"","in":"query","name":"type","required":false,"schema":{"type":"object"}},{"description":"The user's handle for the specified account type","in":"query","name":"handle","required":false,"schema":{"type":"string"}}],"tags":["SearchController"]}},"/v1/twitter/twitterUrl":{"get":{"operationId":"twitterControllerGetTwitterUrl","responses":{"200":{"content":{"*/*":{"schema":{"type":"boolean"}}}},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"","parameters":[{"in":"query","name":"did","required":false,"schema":{"type":"string"}},{"in":"query","name":"handle","required":false,"schema":{"type":"string"}}],"tags":["TwitterController"]}},"/v1/twitter/directTwitterUrl":{"get":{"operationId":"twitterControllerGetDirectTwitterUrl","responses":{"200":{"content":{"*/*":{"schema":{"type":"boolean"}}}},"401":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Unauthorized"}}},"description":"Unauthorized"},"403":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/Forbidden"}}},"description":"Forbidden"},"404":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NotFound"}}},"description":"Endpoint not found"}},"summary":"","parameters":[{"in":"query","name":"did","required":false,"schema":{"type":"string"}},{"in":"query","name":"tweetUrl","required":false,"schema":{"type":"string"}}],"tags":["TwitterController"]}}},"tags":[{"name":"ApiKeyController"},{"name":"AuthController"},{"name":"CredentialController"},{"name":"CredentialCacheController"},{"name":"CredentialsController"},{"name":"DidWebController"},{"name":"DiscordController"},{"name":"GithubController"},{"name":"HealthCheckController"},{"name":"LensController"},{"name":"PersonaController"},{"name":"PersonaDidController"},{"name":"PersonaSearchController"},{"name":"PersonaLinkController"},{"name":"Profile Endpoints"},{"name":"ReportController"},{"name":"SearchController"},{"name":"TwitterController"}]}